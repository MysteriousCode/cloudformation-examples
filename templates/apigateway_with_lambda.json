{
    "Description": "Example API Gateway with Lambda as backend",
    "Parameters": {
        "LambdaFileName": {
            "Description": "Name of the ZIP file with lambda function sources inside S3 bucket",
            "Type": "String"
        },
        "LambdaSourceBucket": {
            "Description": "Name of the bucket where lambda function sources is stored",
            "Type": "String"
        }
    },
    "Resources": {
        "API": {
            "Properties": {
                "Description": "My API",
                "Name": "MyAPI"
            },
            "Type": "AWS::ApiGateway::RestApi"
        },
        "APIDeployment": {
            "DependsOn": "APIFirstResourceMethodGET",
            "Properties": {
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Type": "AWS::ApiGateway::Deployment"
        },
        "APIFirstResource": {
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "API",
                        "RootResourceId"
                    ]
                },
                "PathPart": "{param1}",
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Type": "AWS::ApiGateway::Resource"
        },
        "APIFirstResourceMethodGET": {
            "Properties": {
                "ApiKeyRequired": false,
                "AuthorizationType": "NONE",
                "HttpMethod": "GET",
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "ResponseTemplates": {
                                "application/json": "$input.params('whatever')"
                            },
                            "StatusCode": "200"
                        },
                        {
                            "ResponseTemplates": {
                                "application/json": "$input.params('whatever')"
                            },
                            "SelectionPattern": "[a-zA-Z]+.*",
                            "StatusCode": "404"
                        }
                    ],
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\"param1\": \"$input.params('param1')\", \"param2\": \"$input.params('param2')\"}"
                                ]
                            ]
                        }
                    },
                    "Type": "AWS",
                    "Uri": {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt": [
                                        "Lambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    },
                    {
                        "StatusCode": "404"
                    }
                ],
                "RequestParameters": {
                    "method.request.path.param1": true,
                    "method.request.querystring.param2": true
                },
                "ResourceId": {
                    "Ref": "APIFirstResource"
                },
                "RestApiId": {
                    "Ref": "API"
                }
            },
            "Type": "AWS::ApiGateway::Method"
        },
        "APILambdaPermission": {
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "Lambda"
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "API"
                            },
                            "/*/GET/*"
                        ]
                    ]
                }
            },
            "Type": "AWS::Lambda::Permission"
        },
        "APIStage": {
            "Properties": {
                "CacheClusterEnabled": false,
                "DeploymentId": {
                    "Ref": "APIDeployment"
                },
                "RestApiId": {
                    "Ref": "API"
                },
                "StageName": "live"
            },
            "Type": "AWS::ApiGateway::Stage"
        },
        "LambaRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "LambdaPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "Lambda": {
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "LambdaSourceBucket"
                    },
                    "S3Key": {
                        "Ref": "LambdaFileName"
                    }
                },
                "Handler": "lambda.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        }
    }
}
